Stkhgt_m        = Stkhgt_test,
Stkvel_m_s      = Stkvel_baseline,
Stktmp_K        = Stktmp_baseline,
Stkdia_m        = Stkdia_baseline,
Area_m2         = Area_baseline
)
#speed
speed_src <-
data.frame(
Variable_tested = "velocity",
Name_run        = paste("velocity", Stkvel_test, "ms"),
Stkhgt_m        = Stkhgt_baseline,
Stkvel_m_s      = Stkvel_test,
Stktmp_K        = Stktmp_baseline,
Stkdia_m        = Stkdia_baseline,
Area_m2         = Area_baseline
)
#diameter
diameter_src <-
data.frame(
Variable_tested = "diameter",
Name_run        = paste("diam", Stkdia_test, "m"),
Stkhgt_m        = Stkhgt_baseline,
Stkvel_m_s      = Stkvel_baseline,
Stktmp_K        = Stktmp_baseline,
Stkdia_m        = Stkdia_test,
Area_m2         = Area_baseline
)
#AREA
area_src <-
data.frame(
Variable_tested = "area",
Name_run        = paste("area", Area_test, "m2"),
Stkhgt_m        = Stkhgt_baseline,
Stkvel_m_s      = Stkvel_baseline,
Stktmp_K        = Stktmp_baseline,
Stkdia_m        = Stkdia_baseline,
Area_m2         = Area_test
)
#TEMPERATURE
temp_src <-
data.frame(
Variable_tested = "temperature",
Name_run        = paste("temp", Stktmp_test, "K"),
Stkhgt_m        = Stkhgt_baseline,
Stkvel_m_s      = Stkvel_baseline,
Stktmp_K        = Stktmp_test,
Stkdia_m        = Stkdia_baseline,
Area_m2         = Area_baseline
)
#collate them
point_sources_input <- data.frame(
do.call("rbind",
list(
baseline_src,
height_src,
speed_src,
diameter_src,
area_src,
temp_src
)
)
)
point_sources_input$Id_run = c(1:nrow(point_sources_input))
point_sources_input$Xs = coord_pnt$X
point_sources_input$Ys = coord_pnt$Y
point_sources_input$Ptemis_g_s = Ptemis
##############################################
############### receptors ####################
##############################################
coord_rcpt <- data.frame(sf::st_coordinates(receptors_BNG))
point_receptors_input <-
data.frame(
Id = c(1: length(coord_rcpt$X)),
Xr = coord_rcpt$X,
Yr = coord_rcpt$Y
)
############### to use in model ##############
POINT_INPUT <- list(
source = point_sources_input,
raceptors = point_receptors_input
)
############ paths ####################################
point_path_inp <-
"C:/Users/madtig/Documents/repositories/ScotGov-AERMOD/aermod_test/data/runs_sensitivity/input_files/POINT/"
point_path_out <-
"C:/Users/madtig/Documents/repositories/ScotGov-AERMOD/aermod_test/data/runs_sensitivity/output_files/POINT/"
############ tidy up if running (start fresh) ##########
if (run_point == T){
file.remove(list.files(point_path_inp,
include.dirs = F, full.names = T, recursive = T))
file.remove(list.files(point_path_out,
include.dirs = F, full.names = T, recursive = T))
}
##################################################
################## MEKE THE INPUTS ###############
##################################################
#chuncks equal for all runs
############ CO #############
CO_chunk <- paste0(
"CO STARTING\n",
"   TITLEONE SHAPES TEST CASE", "\n", #name run - irrelevant really
"   MODELOPT CONC FLAT NOSTD", "\n",
"   AVERTIME 1 24 PERIOD", "\n", #period = 1 year what we need
"   POLLUTID GENERIC", "\n", #no specific deposition defined
"   RUNORNOT RUN", "\n",
"   ERRORFIL error.txt", "\n", #if errors where to write them
"CO FINISHED\n"
)
############ ME ############# MET data always EDIN
ME_chunk <-  paste0 (
"ME STARTING\n",
"   SURFFILE EDIN.SFC\n", #path to met file
"   PROFFILE EDIN.PFL\n", #path to met file
"   SURFDATA 0 2022\n",
"   UAIRDATA 02574 2022\n",
"   PROFBASE 0 METERS\n",
"ME FINISHED\n"
)
############ RE ############# receptors
coord_rec <- paste(POINT_INPUT$raceptors[,"Xr"],
POINT_INPUT$raceptors[,"Yr"])
RE_chunk <- paste0(
"RE STARTING", "\n",
paste(paste("   DISCCART", coord_rec), collapse = "\n"), "\n",
"RE FINISHED", "\n"
)
######################## chunck that depend on run + writing inp files ######
if (run_point == T){
#for each height scenario tested
for(i in 1: nrow(POINT_INPUT$source)){
data_src <- POINT_INPUT$source[i,]
name_inp_file <- paste0("point_",
gsub(" ", "_", data_src[,"Name_run"]),
".inp"
)
############ SO ############# sources
#location point source space separated in BNG
coord_src <- paste(data_src[,"Xs"], data_src[,"Ys"])
#Ptemis, Stkhgt, Stktmp, Stkvel, Stkdia
SO_chunk <- paste0(
"SO STARTING", "\n",
"   LOCATION ASRC01 POINT ", coord_src, " 0.0", "\n",
"   SRCPARAM ASRC01 ",data_src[,"Ptemis_g_s"] , " ",
data_src[,"Stkhgt_m"], " ",
data_src[,"Stktmp_K"]," ",
data_src[,"Stkvel_m_s"]," ",
data_src[,"Stkdia_m"], "\n",
#if POINT AERMOD model uses direction-specific building dimensions
"   BUILDHGT ASRC01 ", "36*", data_src[,"Stkhgt_m"], "\n",
"   BUILDWID ASRC01 ", "36*", sqrt(data_src[,"Area_m2"]), "\n",
"   BUILDLEN ASRC01 ", "36*", sqrt(data_src[,"Area_m2"]), "\n",
"   XBADJ    ASRC01 ",    "36*", sqrt(data_src[,"Area_m2"])/2, "\n",
"   YBADJ    ASRC01 ",    "36*0", "\n",
"   SRCGROUP AALL ASRC01", "\n",
"SO FINISHED", "\n"
)
############ OU ############# output
OU_chunk <- paste0(
"OU STARTING", "\n",
"   PLOTFILE PERIOD AALL ",
paste0( "res_point_annual_",gsub(" ", "_",data_src[,"Name_run"]),".txt"), "\n",
"OU FINISHED"
)
######### collate THE INP file and write it #############
inp_file <- paste0(
CO_chunk, "\n",
SO_chunk, "\n",
RE_chunk, "\n",
ME_chunk, "\n",
OU_chunk
)
writeLines(inp_file, paste0(point_path_inp,name_inp_file))
#finished writing input
}
}
if (run_point == T){
source("C:/Users/madtig/Documents/repositories/ScotGov-AERMOD/aermod_test/data/runs_sensitivity/run_POINT.R")
}
output_files <- list.files(path = point_path_out,
pattern = "\\.txt$", full.names = TRUE)
results <- list()
for(i in 1:length(output_files)){
#read the text file split each line
FILE <- strsplit(
readLines(output_files[i]) [c(7,9:length(readLines(output_files[i])))],
"\\s{2,}")
#rebuild in form of DF
FILE[[1]] <- FILE[[1]][-c(1, 2,14)]
FILE[[1]][1] <- "X Y"
dataframe <- data.frame(FILE[[1]])
for (acol in 2:length(FILE)){
col <- FILE[[acol]][-1][1:8]
dataframe <- cbind(dataframe[1:8,],col)
}
dataframe <- data.frame(t(dataframe))
dataframe <- dataframe[-1,1:3]
names(dataframe) <- c("Xr","Yr", "NH3_ug_m3")
#name of run
Name_run_l <-
gsub("_", " ",
sub("\\.txt$", "", sub(".*annual_", "", output_files[i]))
)
dataframe$Name_run <- Name_run_l
#add the receptors id
dataframe$Id_receptor <- POINT_INPUT$raceptors$Id
#variable tested
variable_tested <- as.vector(dplyr::filter(POINT_INPUT$source,
Name_run == Name_run_l
) [1,"Variable_tested"])
dataframe$Variable_tested <- variable_tested
#Id_run
Id_run <- as.vector(dplyr::filter(POINT_INPUT$source,
Name_run == Name_run_l
) [1,"Id_run"])
dataframe$Id_run <- Id_run
#clean df
rownames(dataframe) <- NULL
#save df in list
results[[i]] <- dataframe
}
#collate into final mega table
results <-
do.call(rbind, results) %>%
data.frame()%>%
dplyr::mutate(
dplyr::across(c(Xr, Yr, NH3_ug_m3, Id_receptor, Id_run), as.numeric)
) %>%
dplyr::select(Id_run, Variable_tested, Name_run, Id_receptor, Xr, Yr, NH3_ug_m3)
data_NH3_all <- sf::st_as_sf(results,
coords = c("Xr", "Yr"),
crs = 27700)
plots <- list()
for (avar in seq_along( unique(data_NH3_all$Variable_tested) )){
###### filter the relevant data #####
variable <- unique(data_NH3_all$Variable_tested)[avar]
data_NH3 <-
dplyr::filter(data_NH3_all,
Variable_tested == variable) %>%
#Reorder by ID run to solve the 1, 10, 2 issue order of graphs
dplyr:: mutate(numeric_value = as.numeric(stringr::str_extract(Name_run, "\\d+"))) %>% # Extract numbers
dplyr::arrange(numeric_value) %>% # Arrange in descending order
dplyr::mutate(Name_run = factor(Name_run, levels = unique(Name_run)))
###### make the plot ###############
mega_plot <- ggplot2::ggplot() +
#receptors
ggplot2::geom_tile(data = data_NH3,
ggplot2::aes(
x = sf::st_coordinates(geometry)[,1],
y = sf::st_coordinates(geometry)[,2],
fill =
factor(
cut(NH3_ug_m3,
breaks = c(0, 1, 2, 3, 4, Inf),
labels = c("0-1", "1-2", "2-3", "3-4", ">4"),
right = FALSE),
levels = c("0-1", "1-2", "2-3", "3-4", ">4"))
),
size = 3, shape = 21,
color = "transparent", na.rm = TRUE) +
ggplot2::scale_fill_manual(values = c("0-1" = "#A5C882",
"1-2" = "#F77B7B",
"2-3" = "#D63C33",
"3-4" = "#841B1B",
">4" = "#400000"),
na.value = "transparent") +
#scotland
ggplot2::geom_sf(data = scotland,
fill = NA, color = "#D63333", linewidth = 3) +
#source
ggplot2::geom_sf(data = source_point_BNG,
fill = "#FFFFFF", color = "#292C2F", size = 5,  shape = 21) +
#make 1 map per test
ggplot2::facet_wrap(~Name_run, ncol = 3) +
#make it pretty
ggplot2::xlim(bounding_box ["xmin"], bounding_box ["xmax"]) +
ggplot2::ylim(bounding_box ["ymin"], bounding_box ["ymax"]) +
ggplot2::labs(title = paste("TEST:",variable) )+
theme_bslib +
ggplot2::theme(axis.text.x=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank(),
plot.title = ggplot2::element_text(size=50),
strip.text = ggplot2::element_text(size = 35, face = "bold"),
legend.position = "bottom",
legend.text = ggplot2::element_text(size = 50),
legend.title = ggplot2::element_text(size = 50, face = "bold")
)+
ggplot2::guides(fill = ggplot2::guide_legend(title = "NH3_ug_m3"))
##### save the plot #####
plots[[avar]] <- mega_plot
}
plots <- plots[c(2, 1, 3:length(plots))]
plots
centroid <-  source_point_BNG$geometry
area_km2 <- 0.5
radius_m <-  sqrt(area_km2 * 1e6 / pi)
source_areacirc_BNG <- sf::st_sf(
circle = sf::st_buffer(centroid,
dist = radius_m,
nQuadSegs = 5) #5 per quadrant = 20 corners
)
######################################
# define the recptors ################
######################################
### exclude these within shape and within 1m of it (as in manual)
boundary_1m_buffer <- sf::st_buffer(source_areacirc_BNG, dist = 1)
inside <- sf::st_within(receptors_BNG,
source_areacirc_BNG, sparse = FALSE)
near <- sf::st_intersects(receptors_BNG,
boundary_1m_buffer, sparse = FALSE)
receptors_BNG_within <-receptors_BNG[inside | near,]
bounding_box <- sf::st_bbox(receptors_BNG)
ggplot2::ggplot() +
ggplot2::geom_sf(data = scotland,
fill = NA, color = "#D63333", linewidth = 1) +
ggplot2::geom_sf(data = receptors_BNG,
fill = NA, color = "#37a635", size =2) +
ggplot2::geom_sf(data = source_areacirc_BNG,
fill = "#F49633", color = NA) +
ggplot2::geom_sf(data = receptors_BNG_within,
fill = NA, color = "#EAEFEC", size =2) +
ggplot2::labs(title = "test receptor locations (green)")+
ggplot2::xlim(bounding_box ["xmin"], bounding_box ["xmax"]) +
ggplot2::ylim(bounding_box ["ymin"], bounding_box ["ymax"]) +
theme_bslib +
ggplot2::theme(axis.text.x=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())
###############################################
################ tested vars ##################
###############################################
em     <- 1  #g/s
#RELEASE HEIGHT
Relhgt_baseline   <- 5 #m
Relhgt_test       <- seq(0, 9, by = 1) #m
#RADIUS
Radius_baseline     <- 500 #m
Radius_test         <- seq(100, 1000, by = 100) #m
############### sources #######################
coord_pnt <- data.frame(sf::st_coordinates(source_point_BNG))
#baseline
baseline_src <-
data.frame(
Variable_tested = "none",
Name_run        = "baseline",
Relhgt_m        = Relhgt_baseline,
Radius_m        = Radius_baseline
)
#height
height_src <-
data.frame(
Variable_tested = "height",
Name_run        = paste("height", Relhgt_test, "m"),
Relhgt_m        = Relhgt_test,
Radius_m         = Radius_baseline
)
#radius
radius_src <-
data.frame(
Variable_tested = "radius",
Name_run        = paste("radius", Radius_test, "m"),
Relhgt_m        = Relhgt_baseline,
Radius_m         = Radius_test
)
#collate them
areacirc_sources_input <- data.frame(
do.call("rbind",
list(
baseline_src,
height_src,
radius_src)
)
)
areacirc_sources_input$Aremis_gsm2 = em / (pi * (areacirc_sources_input$Radius_m)^2)
areacirc_sources_input$Id_run = c(1:nrow(areacirc_sources_input))
areacirc_sources_input$Xs = coord_pnt$X
areacirc_sources_input$Ys = coord_pnt$Y
##############################################
############### receptors ####################
##############################################
#same as point
############### to use in model ##############
AREACIRC_INPUT <- list(
source = areacirc_sources_input,
raceptors = point_receptors_input
)
############ paths ####################################
areacirc_path_inp <-
"C:/Users/madtig/Documents/repositories/ScotGov-AERMOD/aermod_test/data/runs_sensitivity/input_files/AREACIRC/"
areacirc_path_out <-
"C:/Users/madtig/Documents/repositories/ScotGov-AERMOD/aermod_test/data/runs_sensitivity/output_files/AREACIRC/"
############ tidy up if running (start fresh) ##########
if (run_areacirc == T){
file.remove(list.files(areacirc_path_inp,
include.dirs = F, full.names = T, recursive = T))
file.remove(list.files(areacirc_path_out,
include.dirs = F, full.names = T, recursive = T))
}
##################################################
################## MEKE THE INPUTS ###############
##################################################
######################## chunck that depend on run + writing inp files ######
if (run_areacirc == T){
#for each height scenario tested
for(i in 1: nrow(AREACIRC_INPUT$source)){
data_src <- AREACIRC_INPUT$source[i,]
name_inp_file <- paste0("areacirc_",
gsub(" ", "_", data_src[,"Name_run"]),
".inp"
)
############ SO ############# sources
#location point source space separated in BNG
coord_src <- paste(data_src[,"Xs"], data_src[,"Ys"])
#Ptemis, Stkhgt, Stktmp, Stkvel, Stkdia
SO_chunk <- paste0(
"SO STARTING", "\n",
"   LOCATION ASRC01 AREACIRC ", coord_src, " 0.0", "\n",
"   SRCPARAM ASRC01 ",data_src[,"Aremis_gsm2"] , " ",
data_src[,"Relhgt_m"], " ",
data_src[,"Radius_m"], "\n",
"   SRCGROUP AALL ASRC01", "\n",
"SO FINISHED", "\n"
)
############ OU ############# output
OU_chunk <- paste0(
"OU STARTING", "\n",
"   PLOTFILE PERIOD AALL ",
paste0( "res_areacirc_annual_",gsub(" ", "_",data_src[,"Name_run"]),".txt"), "\n",
"OU FINISHED"
)
######### collate THE INP file and write it #############
inp_file <- paste0(
CO_chunk, "\n",
SO_chunk, "\n",
RE_chunk, "\n",
ME_chunk, "\n",
OU_chunk
)
writeLines(inp_file, paste0(areacirc_path_inp,name_inp_file))
#finished writing input
}
}
if (run_areacirc == T){
source("C:/Users/madtig/Documents/repositories/ScotGov-AERMOD/aermod_test/data/runs_sensitivity/run_AREACIRC.R")
}
output_files <- list.files(path = areacirc_path_out,
pattern = "\\.txt$", full.names = TRUE)
results <- list()
for(i in 1:length(output_files)){
#read the text file split each line
FILE <- strsplit(
readLines(output_files[i]) [c(7,9:length(readLines(output_files[i])))],
"\\s{2,}")
#rebuild in form of DF
FILE[[1]] <- FILE[[1]][-c(1, 2,14)]
FILE[[1]][1] <- "X Y"
dataframe <- data.frame(FILE[[1]])
for (acol in 2:length(FILE)){
col <- FILE[[acol]][-1][1:8]
dataframe <- cbind(dataframe[1:8,],col)
}
dataframe <- data.frame(t(dataframe))
dataframe <- dataframe[-1,1:3]
names(dataframe) <- c("Xr","Yr", "NH3_ug_m3")
#name of run
Name_run_l <-
gsub("_", " ",
sub("\\.txt$", "", sub(".*annual_", "", output_files[i]))
)
dataframe$Name_run <- Name_run_l
#add the receptors id
dataframe$Id_receptor <- AREACIRC_INPUT$raceptors$Id
#variable tested
variable_tested <- as.vector(dplyr::filter(AREACIRC_INPUT$source,
Name_run == Name_run_l
) [1,"Variable_tested"])
dataframe$Variable_tested <- variable_tested
#Id_run
Id_run <- as.vector(dplyr::filter(AREACIRC_INPUT$source,
Name_run == Name_run_l
) [1,"Id_run"])
dataframe$Id_run <- Id_run
#clean df
rownames(dataframe) <- NULL
#save df in list
results[[i]] <- dataframe
}
#collate into final mega table
results_areacirc <-
do.call(rbind, results) %>%
data.frame()%>%
dplyr::mutate(
dplyr::across(c(Xr, Yr, NH3_ug_m3, Id_receptor, Id_run), as.numeric)
) %>%
dplyr::select(Id_run, Variable_tested, Name_run, Id_receptor, Xr, Yr, NH3_ug_m3)
data_NH3_all <- sf::st_as_sf(results_areacirc,
coords = c("Xr", "Yr"),
crs = 27700)
areacircs <- dplyr::select(AREACIRC_INPUT$source,
Id_run,
Radius_m)
#shape + 1m
areacircs$Radius_m <- areacircs$Radius_m+1
buffered_geom <- purrr::map(areacircs$Radius_m, ~ sf::st_buffer(sf::st_geometry(source_point_BNG),dist = .x, nQuadSegs = 5)[[1]])
avar <- 1
setwd("~/repositories/BioDT_collection/ces-recreation-reports")
system("quarto render")
system("quarto render")
system("quarto render")
