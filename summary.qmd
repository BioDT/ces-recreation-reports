---
title: The BioDT Recreational Potential Model for Scotland
subtitle: Summary
abstract: >
  This report introduces the Recreational Potential model and describes key aspects of its functionality. 
---

## Introduction

The [BioDT project](https://biodt.eu/) (2022-25) brought together a diverse range of European organisations including universities, non-profit research institutes, research infrastructure providers and commercial partners, with the aim of developing prototype '[Digital Twins](https://biodt.eu/DigitalTwin)' (pDTs) to help protect and restore biodiversity. As part of this consortium, the [UK Centre for Ecology & Hydrology](https://www.ceh.ac.uk/) (UKCEH) led the development of a 'Cultural Ecosystem Services' (CES) pDT.

The CES pDT was imagined as a platform that brings together near real time data from a wide range of sources in a manner that is somehow tailored to the individual user. The proposed pDT [@Rolph2024] focuses on two components:

1. The **Recreational Potential (RP)** component aims to estimate the capacity of a given area to sustain the recreational activities valued by an individual user.
2. The **Biodiversity** component aims to predict spatial distributions of mammals, birds, plant and insects.

The rationale behind bringing these two components together into a unified framework is that encountering interesting flora or fauna can enrich people's recreational experiences, and help them to discover new ways to value nature-rich landscapes.

The driving motivation for this work is to promote good health and connection to nature through physical activity outdoors. However, there is also a possible synergy with conservation science, which is increasingly using data collected by non-scientists through 'citizen science' apps such as [iNaturalist](https://www.inaturalist.org/) and [iRecord](https://www.brc.ac.uk/recording). Potentially, certain users could be encouraged to visit areas where there is a greater need for sampling.^[This was the objective of the [DECIDE](https://www.ceh.ac.uk/our-science/projects/decide) project.]

The RP component and the biodiversity component are distinct models that have been developed independently of each other. However, in both cases their outputs can be displayed on an interactive map of Scotland and served to users using an app framework such as R Shiny [@Shiny2025].

In this short report we will describe basic aspects of the Recreational Potential model. For a detailed account of the inner workings of the model the reader is directed to the accompanying [technical supplement](tech_supp.html). The Biodiversity component is described in ==**REF**==.

## Background

The Recreational Potential model described here has a direct ancestor in ESTIMAP (Ecosystem Service Mapping Tool), which was a collection of models used to produce spatially explicit assessments of ecosystem services, including recreation, at a European scale [@Zulian2013; @Paracchini2014]. 

Some years later, @Zulian2018 proposed a protocol for adapting ESTIMAP to local conditions, based on an analysis of case studies involving ESTIMAP and incorporating feedback from stakeholders. This work was part of the [OpenNESS project](https://oppla.eu/groups/openness/openness-project) (2012-17), focusing on _Long Term Socio-Ecological Research Platforms_ (LTSER) [@Dick2018].

@Dick2022 adapted the ESTIMAP tool to focus specifically on Recreational Potential in the Cairngorms. They adjusted the parameters of the tool to match two archetypes with different preferences for recreational activities (these are the 'hard' and 'soft' recreationalist personas described later), and conducted interviews with stakeholders to assess how useful the tool was.

Earlier on in the BioDT project (2022-25), the RP and biodiversity models were combined as part of the 'beta' version of the BioDT app.^[The beta version of the BioDT app is no longer available online.] However, at that time the models was limited to pre-calculated 'static' raster layers covering a small region (the Cairngorms National Park) rather than all of Scotland [@Rolph2024]. @Dick2025b gathered feedback on this tool via a survey and interviews at the British Ecological Society annual meeting in December 2024.

In the months since, development work has focused on improving the speed and scalability of these components, to enable the interactive and personalisable experience that was envisaged. The model was rewritten from scratch and a new Shiny app developed that was able to leverage these efficiencies. It was released as 'version 1.0' upon the close of the BioDT project [@ukceh2025], and is [available on GitHub](https://github.com/BioDT/uc-ces-recreation) under an open-source license.

The SPEAK project followed in the same spirit as [@Dick2022], but using the updated Recreational Potential model, which allows for greater individual customisation by users. Some preliminary findings from this study are available as a conference presentation [@Dick2025b] and workshop report [@Dick2025c].

A retrospective look at the CES part of the BioDT project will be published shortly under @Rolph2025.

## Model description

### Overview

To describe the Recreational Potential model we will start from its outputs and work backwards.

The main model output is an two-dimensional array of numbers (a _raster_) representing an *Recreational Potential value* (RP value) between $0$ and $1$ for each 20x20 metre square area of land (_pixel_) within a given area, with higher values indicating greater Recreational Potential for that specific persona. These RP values can then be mapped to colours and displayed as a _heat map_ over a map of Scotland, as illustrated in @fig-rpexample.

![An example of a heat map displaying Recreational Potential.](images/rp_example.png){#fig-rpexample}

An RP value is constructed from a combination of **87** _items_ representing distinct attributes of the land. The 87 items are grouped into four _components_, which are outlined in @tbl-components. RP values are calculated by weighting each item by a _score_ between $0$ and $10$ that reflects the importance of that item to the user. A full set of 87 scores is referred to as a _persona._


| Component                                                                | Short code | \# items |
| :------------------------------------------------------------------------ | :---------- | :-------- |
| **Landscape** - the suitability of land to support recreational activity | `SLSRA`    | 40       |
| **Natural Features** influencing the potential                           | `FIPS_N`   | 24       |
| **Infrastructure** features influencing the potential                    | `FIPS_I`   | 10       |
| **Water** - rivers and lakes                                             | `Water`    | 13       |

: The four components contributing to Recreational Potential values. {#tbl-components tbl-colwidths="[70,20,10]"}

The RP model thus requires two inputs from users:

1. A **persona**, i.e. the 87 scores for each item/feature, contained in a `.csv` file.
2. A **region of interest**, i.e. an area within Scotland in which to calculate RP values, given by either a shapefile or the four coordinates of a bounding box.

We will often refer to the computations that produce an RP raster from the two user inputs as the 'dynamic' part of the RP model, since these computations must be performed each time the user makes a change to their persona or region of interest.

### Persona

As previously stated, a persona is nothing more than a set of 87 numbers between $0$ and $10$ corresponding to each of the 87 items.

Personas are stored in `.csv` files. However, the interactive R Shiny app provided with the model (@sec-shinyapp) contains a convenient interface for loading, saving and editing personas. @fig-persona is a screenshot from this app, showing some example persona scores for the _Water_ component.

![An example set of persona scores for the 'Water' component.](images/persona.png){#fig-persona}


### Input data {#sec-inputs}

There is another essential set of inputs to the model which are not specified by the user. These are a set of 87 raster layers --- one for each of the 87 items --- covering Scotland at a resolution of 20x20m.

For items belonging to the *Landscape* (`SLSRA`) component or the *Natural Features* component (`FIPS_N`), these rasters contain just ones and zeros, with $1$ indicating presence of the feature in that pixel and $0$ indicating absence.

$$
\mathrm{SLSRA}_j = \begin{cases}
1 & \text{if feature} \; j \; \text{present in pixel} \\
0 & \text{if feature} \; j \; \text{absent in pixel} 
\end{cases}
$$

For items belonging to the _Infrastructure_ (`FIPS_I`) component or the _Water_ (`Water`) component, the input rasters contain values _between_ zero and one.

$$
\mathrm{Water}_j = \begin{cases}
1 & \text{if feature} \; j \; \text{present in pixel} \\
0 & \text{if feature} \; j \;\gtrapprox 500\text{m away} \\
u(\mathrm{distance}_j) & \text{otherwise}
\end{cases}
$$

where $\mathrm{distance}_j$ is the distance to the nearest pixel in which the feature $j$ is present, and $u(\mathrm{distance})$ is a function that maps distances to values between $0$ and $1$, decreasing as the distance increases and falling to zero at approximately 500m (see [Section 1, Technical Supplement](tech_supp.html#sec-techdesc) for details). 

Thus, $1$ still indicates presence of the feature in that pixel, but $0$ instead indicates that the feature is not only absent in that pixel, but all surrounding pixels within 500m. The range of values between zero and one are used to signify that the feature is nearby (within 500m), but not present in this pixel itself.

This continuous scale allows the RP model to incorporate how areas near e.g., a loch, can still contribute to the recreational potential, even if they do not directly contain the feature.

@fig-inputs contrasts a presence/absence raster (lowlands) with a proximity raster (minor rivers).

```{r, echo=FALSE}
#| label: fig-inputs
#| fig-cap: An example of a presence/absence raster (left) and a proximity raster (right) covering the same region just south of Edinburgh.

fips_n <- terra::rast(file.path(biodt.recreation::get_example_data_dir(), "FIPS_N.tif"))
lowlands <- fips_n$FIPS_N_Landform_9
lowlands[is.na(lowlands)] <- 0

water <- terra::rast(file.path(biodt.recreation::get_example_data_dir(), "Water.tif"))
rivers <- water$Water_Rivers_4
rivers[is.na(rivers)] <- 0

terra::plot(c(lowlands, rivers), main=c("Lowlands", "Minor Rivers"))
```

### Recreational Potential calculation {#sec-rpcalc}

Each of the four components is calculated by multiplying the item/features by the corresponding persona score, summing, and normalising the result,

$$
\mathrm{SLSRA} = \mathrm{normalise}\left( \sum_j \mathrm{Score}^{(\text{SLSRA})}_j \times \mathrm{SLSRA}_j \right) \, .
$$

In this context, 'normalisation' means transforming the values so that they lie between $0$ and $1$, through the following transformation:

$$
\mathrm{normalise}(x) = \frac{x - x_\text{min}}{x_\text{max} - x_\text{min}} \, .
$$

The final RP value is calculated by summing these four components and normalising once more,

$$
\mathrm{RP} = \mathrm{normalise} \left( \mathrm{SLSRA} + \mathrm{FIPS\_N} + \mathrm{FIPS\_I} + \mathrm{Water} \right) \, .
$$

:::{.callout-note}
#### The effect of changing the region of interest
An important detail is that the normalisation step depends on the minimum and maximum values *within the chosen region of interest*. This means that running the model with a different region of interest (e.g. over a larger area) will generally yield different values for the same locations, even if both the persona and the underlying data are unchanged.
:::

 The dynamic part of the model is depicted in @fig-mermaid.

```{mermaid}
%%| label: fig-mermaid
%%| fig-cap: A breakdown of the 'dynamic' part of the Recreational Potential model, that responds to changes in user input.

flowchart LR
 subgraph s1["'Dynamic' computation of Recreational Potential"]
        D["Crop the 4<br>component rasters to the<br>region of interest"]
        E["Calculate each<br>component"]
        F["Normalise each<br>component"]
        G["Sum<br>components"]
        H["Normalise"]
  end
    A(["<i>User input:</i><br>Persona scores"]) ---> E
    B(["<i>User input:</i><br>Region of interest"]) --> D
    C[("<i>Fixed input:</i><br>Raster data")] --> D
    D --> E
    E --> F
    F --> G
    G --> H
    H --> I(("RP value"))
    style s1 fill:#FFF9C4
    style A color:#000000
    style B color:#000000
    style C color:#000000
    style D color:#000000
    style E color:#000000
    style F color:#000000
    style G color:#000000
    style H color:#000000
```

## Model code

### Brief history of development work

The RP model has been gradually developed within UKCEH over a number of years. There have been three (known) major iterations.

Some effort has been taken to make previous versions findable. All individuals known to have contributed to development are credited in the version 1.0 release [@ukceh2025]. 

| Iteration | Version           | Source                                                           |
| --------- | :----------------- | :---------------------------------------------------------------- |
| 1 (2023)  | -                 | [https://github.com/BioDT/uc-ces/tree/main/recreation_model](https://github.com/BioDT/uc-ces/tree/main/recreation_model)       |
| 2 (2024)  | -                 | [https://github.com/BioDT/uc-ces-recreation/tree/2024-model](https://github.com/BioDT/uc-ces-recreation/tree/2024-model)       |
| 3 (2025)  | SPEAK pre-release | [https://github.com/BioDT/uc-ces-recreation/tree/SPEAK-prerelease](https://github.com/BioDT/uc-ces-recreation/tree/SPEAK-prerelease) |
| 3 (2025)  | 1.0               | [https://github.com/BioDT/uc-ces-recreation/releases/tag/v1.0](https://github.com/BioDT/uc-ces-recreation/releases/tag/v1.0)     |

: Versions of the Recreational Potential model. {#tbl-history}

Source code for the most recent version of the code can be found on GitHub at [https://github.com/BioDT/uc-ces-recreation](https://github.com/BioDT/uc-ces-recreation). This may be more up-to-date than version 1.0 (June 2025), which is the subject of this report.

### Overview of the repository

The repository is organised in the following way:

```txt
├── CONTRIBUTING.md  # <1>
├── DESCRIPTION  # <2>
├── inst
│   ├── examples
│   │   ├── capture_messages.R # <3>
│   │   ├── compute_component.R
|   |   ...
│   │   └── save_persona.R  # <3>
│   ├── extdata
│   │   ├── config
│   │   │   └── config.csv  # <4>
│   │   ├── personas
│   │   │   └── presets.csv  # <5>
│   │   ├── rasters
│   │   │   ├── Bush
│   │   │   │   ├── FIPS_I.tif  # <6>
│   │   │   │   ├── FIPS_N.tif
│   │   │   │   ├── SLSRA.tif
│   │   │   │   └── Water.tif   # <6>
│   │   │   └── Scotland
│   │   │       ├── FIPS_I.tif  # <7>
│   │   │       ├── FIPS_N.tif
│   │   │       ├── SLSRA.tif
│   │   │       └── Water.tif   # <7>
│   │   └── shapefiles
│   │       ├── Bush
│   │       │   ├── Bush.cpg  # <8>
│   │       │   ├── Bush.dbf
│   │       │   ├── Bush.prj
│   │       │   ├── Bush.shp
│   │       │   └── Bush.shx  # <8>
│   │       └── Scotland
│   │           ├── Scotland.cpg  # <9>
│   │           ├── Scotland.dbf
│   │           ├── Scotland.prj
│   │           ├── Scotland.shp
│   │           └── Scotland.shx  # <9>
│   └── scripts
│       ├── cli
│       │   ├── app.sif  # <10>
│       │   ├── main.R  # <11>
│       │   └── README.md
│       └── data_production
│           ├── app.sif  # <12>
│           ├── main.R  # <13>
│           └── README.md
├── LICENSE  # <14>
├── LICENSE.md  # <14>
├── man
│   ├── assert_to_bool.Rd  # <15>
│   ├── assert_valid_bbox.Rd
│   ...
│   └── timed.Rd  # <15>
├── NAMESPACE  # <16>
├── R
│   ├── app_run.R         # <17>
│   ├── app_server.R
│   ├── app_text.R
│   ├── app_theme.R
│   ├── app_ui.R
│   ├── bbox.R
│   ├── config.R
│   ├── data_download.R
│   ├── data_input.R
│   ├── data_production.R
│   ├── example.R
│   ├── legacy.R
│   ├── persona.R
│   ├── recreation.R
│   └── utils.R           # <17>
├── README.md
├── renv.lock  # <18>
├── dev
│   ├── cli_test.sh  # <19>
│   ├── dev.sh  # <20>
│   ├── pre-commit.R  # <21>
│   ├── README.md
│   └── run_app.sh  # <22>
├── tests
│   └── testthat
│       └── test_io.R  # <23>
└── vignettes
    ├── compute_potential.qmd  # <24>
    ├── personas.qmd
    └── run_app.qmd  # <24>
```

1. Instructions for potential contributors.
2. The standard [`DESCRIPTION` file](https://r-pkgs.org/description.html) for R packages, containing metadata about the package.
3. Simple examples using the package functions, which get included in the generated documentation.
4. Configuration file, mapping layer names to raster values (for the pre-processing step) and descriptions (used in the Shiny app).
5. File containing two 'preset' personas: the 'hard' and 'soft' recreationalists described in @Rolph2024.
6. Dataset covering a small area, for use in examples and vignettes.
7. Dataset for all of Scotland. This is not included in the package and is instead downloaded separately.
8. Shapefile and auxiliary data for the example dataset.
9. Shapefile and auxiliary data for the full Scotland-wide dataset.
10. Container definition file used to build a Singularity container for `cli/main.R`.
11. Command-line script for the model taking a persona and bounding box as input. This is expected to be called from the main BioDT app.
12. Container definition file used to build a Singularity container for `data_production/main.R`.
13. Script that executes all steps of the data pre-processing pipeline.
14. MIT licenses (`.md` for the repository, no extension for the package).
15. Compiled documentation for the package, generated using [roxygen2](https://roxygen2.r-lib.org/).
16. The standard [`NAMESPACE`](https://r-pkgs.org/namespace.html) file for R packages, containing a list of functions provided by the package.
17. Source code for the package.
18. [`renv`](https://rstudio.github.io/renv/) lockfile used (in theory) to install packages deterministically. Used when deploying app to Posit Connect.
19. Bash script that runs `Rscript inst/scripts/cli/main.R` with example data.
20. Bash script that runs `pre-commit` if available, or else `Rscript scripts/pre-commit.R`, as well as the tests.
21. R script that emulates the behaviour of `pre-commit` when run, in case the latter is not installed.
22. Bash script that loads the local version of the package and runs the Shiny app, for convenience during development.
23. A file containing [unit tests](https://testthat.r-lib.org/). Essentially tokenistic, but provides a template for more unit tests to be added in future.
24. Some [vignettes](https://r-pkgs.org/vignettes.html) demonstrating simple use of the package.

### Package structure

The code is bundled as an `R` _package_. This has a number of advantages compared with a stand-alone script, since the standardised setup allows us to leverage tools for _installing_, _documenting_ and _testing_ the code, and managing its dependencies on other packages.

In particular, the package may be installed by passing the GitHub repository to [`remotes::install_github`](https://remotes.r-lib.org/reference/install_github.html) (or the `devtools` function with the same name).

```R
remotes::install_github("BioDT/uc-ces-recreation")
```

This will install the package, which is named `biodt.recreation`. It will also install the packages upon which `biodt.recreation` depends, which are listed under `Imports` in the `DESCRIPTION` file.

Functionality is provided through a collection of _functions_ in the `R/` directory that, after installing the package, are accessible to the user in the `biodt.recreation` namespace. That is, functions such as `compute_potential` are accessed using the syntax `biodt.function::compute_potential`, or by name alone after exposing the whole namespacing using `library(biodt.recreation)`.

Documentation for these functions is contained in the `.Rd` files within the `man/` directory. This documentation can be brought up in RStudio by typing in `?` followed by the function name. For example, typing in `?compute_potential` opens the page shown in @fig-documentation.

![An example of rendered documentation in RStudio.](images/documentation.png){#fig-documentation}

### Downloading the input data

Input data for the RP model is not available in precisely the form required by the model, as described in @sec-inputs. Rather, these input rasters are obtained through a series of processing steps which combine and transform 'raw' data downloaded from various open-access datasets.

Currently, this 'data production' process is split into a manual stage and an automated stage. The automated stage is carried out by a script in the `inst/scripts/data_production/` directory.

However, users need not run this script; the data which it produces is stored on Dropbox^[In case the Dropbox data becomes unavailable, the data is also bundled with the [version 1.0 release](https://doi.org/10.5281/zenodo.15705544) on Zenodo.] and can be downloaded by calling a function provided by the package.

```R
# Allow 10 minutes for the download before timing out!
options(timeout=600)  

biodt.recreation::download_data()
```

### Calculation of RP values

As stated earlier, the RP model requires two user inputs to run: a persona and a region of interest.

For this demonstration, we will use one of the 'preset' personas, which is loaded using the function `get_example_persona()`. We will also load an example bounding box which covers an area just south of Edinburgh.

The following snippet of code demonstrates how to compute Recreational Potential. The function also returns each component individually.

```R
library(biodt.recreation)

persona <- get_example_persona()
bbox <- get_example_bbox()

layers <- compute_potential(persona, bbox)
```

The output of this function, `layers`, is a five-layered raster, whose layers are the four component layers plus the RP layer, as described in @sec-rpcalc.

### 'Preset' personas

The code snippet above made use of two convenience functions for constructing a persona and a bounding box.

A persona is represented by a very specific type of object in `R` (a _named vector_ with 87 elements and specific names). It is therefore unlikely that users will want to create one from scratch without using the Shiny app interface.

We provide two 'preset' personas along with the package. These are

1. **_Hard Recreationalist_**: this persona values remote, challenging environments and avoids built-up or highly managed areas.
2. **_Soft Recreationalist_**: this persona values tranquil, accessible landscapes and natural water features, and avoids steep or harsh terrain.

:::{.callout-note}
#### Origins of the Hard/Soft Recreationalist personas

These personas can be traced back to the study by @Dick2022 [p. 5], from which we quote:

> Two individuals were selected and invited to parameterise the model because they were both users of the \[Cairngorms National Park\] for recreation and considered by park officials as typical of the spectrum of recreational users of the area (local and visitors)... The self-reported soft recreationalist was a staff member of CNPA who had never climbed a ‘Munro’ (a hill over 3000 ft – a common measurement of hiking capability and achievement in the area) and the hard recreationalist regularly hill walked and had completed over 200 Munros.

:::

Preset personas can be loaded into an `R` session as follows:

```R
# Get the path to the preset persona file
persona_file <- get_preset_persona_file()

# Load the Hard Recreationalist persona
hard_recreationalist <- load_persona(persona_file, "Hard_Recreationalist")

# Load the Soft Recreationalist persona
soft_recreationalist <- load_persona(persona_file, "Soft_Recreationalist")
```

In fact the function `get_example_persona()` loads the _Hard Recreationalist_ persona.

The strongest preferences of the *Hard Recreationalist* persona are highlighted in @tbl-hard.

```{r, echo=FALSE}
library("biodt.recreation")
source("functions_report.R")
```

```{r, echo=FALSE, message=FALSE}
#| label: tbl-hard
#| tbl-cap: Highest and lowest scores in the _Hard Recreationalist_ persona.

persona_file <- get_preset_persona_file()
hard_recreationalist <- load_persona(persona_file, "Hard_Recreationalist")

meaningful_scores <- summarise_persona_scores(hard_recreationalist)
  
knitr::kable(meaningful_scores, format = "html")
```

The strongest preferences of the *Soft Recreationalist* persona are highlighted in @tbl-hard.

```{r, echo=FALSE, message=FALSE}
#| label: tbl-soft
#| tbl-cap: Highest and lowest scores in the _Soft Recreationalist_ persona.

persona_file <- get_preset_persona_file()
soft_recreationalist <- load_persona(persona_file, "Soft_Recreationalist")

meaningful_scores <- summarise_persona_scores(soft_recreationalist)
  
knitr::kable(meaningful_scores, format = "html")
```

### Shiny app {#sec-shinyapp}

As part of the SPEAK study an R Shiny app was developed that focused exclusively on the Recreational Potential model. This is provided alongside the main package, since it provides a convenient, dynamic interface for testing and visualising outputs.

The source code for the app is split across several files, each containing the `app_` prefix:

- `app_ui.R` contains a function `make_ui` that returns the user interface (UI), i.e. the layout of the Shiny app, sliders, map, buttons etc.
- `app_server.R` contains a function `make_server` that returns the `server` function, which defines the dynamic parts of the app, such as loading/saving/editing personas and drawing a rectangle on the map.
- `app_theme.R` contains some custom UI elements such as the colour scheme and logo.
- `app_text.R` contains the extended text elements of the app, such as the user guide.
- `app_run.R` contains a convenience function `run_app` for running the app.

The app can be run from an `R` session by calling the `run_app()` function:

```R
biodt.recreation::run_app()
```

The result should look like @fig-app.

If you are in RStudio this should launch the app in a separate pane. To launch the app in your default browser, you can pass the option `launch.browser = TRUE` to the function.

![A screenshot of the R Shiny App developed specifically for the RP model for use in the SPEAK study.](images/app.png){#fig-app}

Detailed instructions for using the app are contained within the app itself, in the 'User Guide' tab. However, the essential steps are:

1. Create a persona using the 'Persona' tab.
2. Draw a box on the map by clicking the square orange button and dragging your mouse over the map.
3. Click the 'Update Map' button to compute the Recreational Potential value.

## Interactive demo

:::{.content-visible when-format="pdf"}
The interactive demo is only available in the HTML version of this report. This is available online at [https://biodt.github.io/ces-recreation-reports](https://biodt.github.io/ces-recreation-reports).
:::

:::{.content-visible when-format="html"}

<!-- The source code used to produce this example can be found HERE. -->

```{r, echo=FALSE}
library(magrittr)
library(biodt.recreation)

source("functions_report.R")

water <- terra::rast(system.file("extdata", "rasters", "Bush", "original", "Water.tif", package="biodt.recreation"))

slsra <- terra::rast(system.file("extdata", "rasters", "Bush", "SLSRA.tif", package="biodt.recreation"))

fips_n <- terra::rast(system.file("extdata", "rasters", "Bush", "FIPS_N.tif", package="biodt.recreation"))

fips_i <- terra::rast(system.file("extdata", "rasters", "Bush", "original", "FIPS_I.tif", package="biodt.recreation"))


# the box of bush estate
e <- terra::ext(water)
coords <- matrix(c(
  e$xmin, e$ymin,
  e$xmax, e$ymin,
  e$xmax, e$ymax,
  e$xmin, e$ymax,
  e$xmin, e$ymin # close polygon
), ncol = 2, byrow = TRUE)
bbox_poly <- terra::vect(coords,
  type = "polygons",
  crs = terra::crs(water)
) %>%
  sf::st_as_sf() %>%
  sf::st_transform(crs = 4326)

base_map <- 
  leaflet::leaflet() %>%
  leaflet::addProviderTiles("OpenStreetMap.Mapnik", options = leaflet::providerTileOptions(zIndex = 0, noWrap = TRUE), group = "Streets") %>%
  leaflet::addProviderTiles("Esri.WorldImagery", options = leaflet::providerTileOptions(zIndex = 0, noWrap = TRUE), group = "Satellite") %>%
  leaflet::addPolygons(
    data = bbox_poly,
    color = "black",
    weight = 3,
    fill = FALSE
  ) 

```

```{r, echo=FALSE, warning=FALSE, results='hide', message = FALSE}
persona <- get_example_persona()
bbox <- get_example_bbox()
data_dir <- get_example_data_dir()

# Compute all layers
layers <- compute_potential(persona, bbox, data_dir)
```

```{r, echo=FALSE}
build_rp_map(base_map, RP_output = layers)
```
:::

## Known limitations

Here we outline some known issues and limitations that a user is likely to encounter when using the model. Issues and suggestions of a more technical nature are discussed in the [developer's report](dev_report.html#sec-recommendations).

- The RP maps can be insufficiently detailed and sometimes important features such as footpaths are missing. This is due to the underlying data being either inaccurate, out of date, or of insufficient resolution to resolve these features.

- The model outputs lack important information relevant to recreational activities, such as information about toilets, parking etc.

- Linear features such as paths and rivers are hard to discern. This is due to the fact that _proximity to_ rather than _presence of_ these features contributes to the RP value, so a road appears on the map as a thick band.

- The current set of 87 items that users must score includes many feature types that many lay users will not be familiar with --- what is a _"moraine"_ anyway? 

- The RP values depend on the region of interest specified. Hence, if the region of interest is changed (e.g. by drawing a smaller box on the map) the RP values will likely change, even if the persona scores are unchanged. This is due to the 'normalisation' step.

- The influence of the persona scores on the output RP values is not transparent and sometimes counter-intuitive. Scoring an entire component with high (low) values does not necessarily mean the component will contribute more (less) to the RP. In fact, only differences in scores _within_ a component translate into differences in RP values. This is again due to the 'normalisation' step.


## Future directions

We see several potential avenues for further research and development work. Again, more technical detail on these suggestions is provided in the [developer's report](dev_report.html#sec-recommendations).

1.  **Simplifying feature scoring:**

    While the current set of 87 items allows for a detailed definition of a persona, this can be very time-consuming for users, especially if they are unfamiliar with many of the feature types. Further work could look at grouping similar features into broader thematic categories (e.g. 'mountain terrain', 'urban infrastructure', 'wetlands') to make the scoring process more intuitive and efficient. The option of scoring items at a finer level of detail could be retained for the benefit of expert users.

	An expanded set of 'preset' personas could be an additional convenience. These could include personas calibrated for cyclists, families, hikers, birdwatchers etc.

2. **Make the effect of user inputs on RP values more intuitive:**

	As discussed above, the effect of adjusting personas scores or the region of interest on the RP values is likely to be a source of confusion. Future updates to the model should prioritise intuitive behaviour and transparency. Removing the normalisation of components would go a long way to meet these objectives.

3.  **Periodically update the underlying datasets:**

    Some of the datasets used in the current version of the model will become outdated as landscapes change or improved data becomes available. Periodically updating the datasets is therefore important to maintain relevance of the model. This could be achieved by replacing the manual 'offline' data production process with an automated 'online' process that is triggered periodically, e.g. when a dataset is updated. Doing this would also allow the model to be updated based on the weather or season, and in doing so account for flood risk, trail closures etc.

	However, the frequency with which to update these datasets should be determined by balancing the needs of users with the monetary and environmental cost of the data acquisition and processing pipeline.

4. **Integrate with third-party apps or services:**

	It may be worth considering whether integrating the BioDT app with third party data services may be more efficient than regularly re-creating the input data for the RP model. Third-party services could provide information as to the availability of parking, toilets, places to eat, weather forecast, and other things that people may need to plan their activity.

5.  **Scenario analysis:**

    The RP model could become a tool for scenario planning, if users were able to add or remove features from the landscape to simulate possible developments (e.g. a new cycle route), land use changes (e.g. a housing development), or land cover changes (e.g. from climate change forecasts).


{{< include _endmatter.qmd >}}
