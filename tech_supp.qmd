---
title: The BioDT Recreational Potential Model for Scotland
subtitle: Technical Supplement
abstract: >
  This supplement provides technical details about the Recreational Potential model. This includes a mathematical description of the model, details regarding the source data, and technical aspects of the code.
---

## Technical description of the model {#sec-techdesc}

While there have been several publications citing the RP model, so far none have included a detailed technical description of the model itself.

### Presence/absence rasters

We begin by defining some notation.

Let $I : \mathbb{R}^2 \to \{0, 1\}$ be a binary-valued function that maps pairs of coordinates $x \equiv (x_1, x_2) \in \mathbb{R}^2$ to either $0$ or $1$. This is a mathematical representation of a single raster layer in a '[one-hot](https://en.wikipedia.org/wiki/One-hot)' representation, where a value of $I(x) = 1$ indicates presence of a feature at the coordinate $x$, and $I(x) = 0$ indicates absence. 

The RP model currently includes 87 features/items grouped into four components (see @sec-listitems). Each of these has its own presence/absence raster. We will therefore introduce two subscript indices and write each layer as $I_{ij}(x)$, where

- $i \in \{1, 2, 3, 4\}$ labels the component to which $I_{ij}$ belongs, as specified in @tbl-componentlabels, and
- $j \in \{1, 2, \ldots, n_i\}$ labels the item/feature within that component, of which there are $n_i$.

As a concrete example, if $j=1$ labels the 'pond' item, then $I_{41}(x)$ takes a value of $1$ whenever there is a pond at $x$, and a value of $0$ elsewhere.

| $i$ | Component        | Short code |
| --- | ---------------- | ---------- |
| 1   | Landscape        | `SLSRA`    |
| 2   | Natural Features | `FIPS_N`   |
| 3   | Infrastructure   | `FIPS_I`   |
| 4   | Water            | `Water`    |

: Integer label and short-code for the four components of the RP model {#tbl-componentlabels}


### Proximity contributions

For certain features like rivers and lakes it does not make sense to restrict their contributions to the Recreational Potential to the pixels in which they are present. One does not need to be standing in a lake to appreciate it!^[Indeed this is true for almost every type of feature, but these proximity contributions were only computed for roads/paths and water features.]

It makes sense to attempt to account for the presence of these features nearby. 

Let $\mathcal{P}_{ij} \subset \mathbb{R}^2$ denote the set of coordinates in which the feature $(ij)$ is present, i.e.^[The right-hand-side of @eq-presence can be read as "The set of all 2d coordinates $x'$ for which the condition $I_{ij}(x') = 1$ is satisfied."]

$$
\mathcal{P}_{ij} := \left\{ x' \in \mathbb{R}^2 \mid I_{ij}(x') = 1 \right\} \, .
$$ {#eq-presence}

We first compute a 'distance raster' in which each pixel is assigned a value that is the (Euclidean) distance to the *nearest* pixel in which the feature $(ij)$ is present,

$$
d_{ij}(x) = \min_{x'\in \mathcal{P}_{ij}} \lVert x - x' \rVert_2 \, ,
$$ {#eq-distance}

where $\lVert x - x' \rVert_2 = \sqrt{(x_1 - x'_1)^2 + (x_2 - x'_2)^2}$.

These distances must be mapped to the unit interval $[0, 1]$ such that $0 \mapsto 1$ and $\infty \mapsto 0$, i.e. so that presence of the feature in this pixel results in the highest value of $1$, tailing off to $0$ when the feature is very far away.

There are many different ways to achieve this. Following @Paracchini2014 [p. 374 -- Eq. 1], the function chosen is a smooth, monotonically decreasing function in the logistic family,

$$
u(d_{ij}(x) \,; \alpha, \kappa) = \frac{\kappa + 1}{\kappa + \exp(\alpha \, d_{ij}(x))} \, .
$$  {#eq-proximity}

It remains to specify values for the parameters $\kappa$ and $\alpha$, the latter of which is most important since it determines the rate at which the value of $u$ declines as the distance to the nearest feature increases.

The parameters chosen in the original version of this code were^[The provenance of these values, which date back to the [earliest version of the code](https://github.com/BioDT/uc-ces/commit/5c5961376df6753725e634378fa709dac1050ff6), has been lost. The precision with which $\alpha$ is given is a particular curiosity.]

$$
\kappa = 6 \, , \qquad \alpha = 0.01011 \, ,
$$ {#eq-proxparams}

resulting in a function, @fig-logistic, that halves at $d\approx200$ (metres) and drops to $0.1$ at $d\approx400$.^[Note that this does not exhibit the classic 'S' shape of logistic curves since the domain is restricted to the positive real line (distances are non-negative!).] At this distance, features with a user-provided score of $10$ (i.e. the highest) would be equivalent to a local feature given a score of $1$ (the lowest). It is safe to assume that at distances greater than this the contribution from the feature would be indiscernible to the user.

```{r}
#| label: fig-logistic
#| fig-cap: A plot of the function which maps positive distances to the unit interval.
#| code-fold: true

alpha <- 0.01011
kappa <- 6
logistic_func <- function(d) {
	(kappa + 1) / (kappa + exp(alpha * d))
}

d <- seq(0, 500, by = 1)
u <- logistic_func(d)

plot(d, logistic_func(d), ylim=c(0, 1), type="l", lwd=2,
	xlab=expression("d"), ylab=expression("u(d, alpha, kappa)"))
```

### Calculation of a single component

As mentioned previously, there are 87 features in total, each of which corresponds to (a) persona score between $0$ and $10$,

$$
\rho_{ij} \in \{0, 1, \ldots, 10\} \, ,
$$ {#eq-score}

and (b) a raster layer $f_{ij}(x)$. For the landscape and natural features components (i.e. $i = 1,2$) the feature rasters are precisely the binary presence/absence rasters discussed previously,

$$
f_{ij}(x) = I_{ij}(x) \, , \qquad i = 1, 2 \, .
$$ {#eq-raster12}

For the infrastructure and water components ($i=3, 4$) the features rasters contain the proximity contributions described above,

$$
f_{ij}(x) = u(d_{ij}(x) \,; \alpha, \kappa) \, , \qquad i = 3, 4 \, .
$$ {#eq-raster23}

Each component is calculated as a simple weighted sum of the features contained within it,

$$
F_i(x \,; \rho_i) = \sum_{j=1}^{n_i} \rho_{ij} f_{ij}(x) \, ,
$$ {#eq-component}

where we have permitted $\rho_i$ to denote the set of persona scores $\{\rho_{i1}, \rho_{i2}, \ldots, \rho_{i n_i} \}$ for the $i$-th component.

### Domain-dependent rescalings {#sec-rescalings}

Let $F \vert_{\mathcal{R}}$ denote the restriction of a function $F$ to a subdomain $\mathcal{R} \subset \mathbb{R}^2$ which defines the 'region of interest' in which we wish to compute Recreational Potential. We now define a family of rescaled functions,

$$
\hat{F}(x \,; \mathcal{R}) := \frac{F(x) - \min F \big\vert_{\mathcal{R}}}{\max F \big\vert_{\mathcal{R}} - \min F \big\vert_{\mathcal{R}}} \, ,
$$ {#eq-rescale}

each of which corresponds to a particular choice of restriction, i.e. a particular region of interest.

Assuming that $F(x)$ is not a constant function on $\mathcal{R}$,^[If $F(x)$ is constant in the region of interest then the right-hand-side of @eq-rescale diverges and $\hat{F}$ is undefined.] these rescaled functions are 'normalised' to the unit interval *within* the region of interest, i.e. 

$$
\min_{x\in\mathcal{R}} \hat{F}(x \,; \mathcal{R}) = 0 \, , \qquad
\max_{x\in\mathcal{R}} \hat{F}(x \,; \mathcal{R}) = 1 \, .
$$ {#eq-minmax}

It is important to be aware that with this approach to rescaling introduces a dependence on the region of interest. That is, 

$$
\hat{F}(x \,; \mathcal{R}_1) \neq \hat{F}(x \,; \mathcal{R}_2) \, .
$$ {#eq-regiondependence}

Thus, the RP value at any given pixel should be expected to change when a different area is selected, even if the persona and the input data stays the same.

### Calculation of Recreational Potential

To compute the Recreational Potential value, the four rescaled components are summed,

$$
F_{\mathrm{RP}}(x \,; \rho, \mathcal{R}) = \sum_{i=1}^4 \hat{F}_i(x \,; \rho_i , \mathcal{R}) \, ,
$$ {#eq-rp}

and rescaled $F_{\text{RP}} \longrightarrow \hat{F}_\text{RP}$ using @eq-rescale once more (with the same $\mathcal{R}$) so that the result falls in the interval $[0, 1]$.


## Production of input rasters

The data production, or raster pre-processing stage refers to the production of the rasters that are directly multiplied by the persona scores in the dynamic part of the model. That is, the output of this stage is four multi-layered rasters $(f_1, f_2, f_3, f_4)$ corresponding to the four components, where $f_i := (f_{i1}, f_{i2}, \ldots, f_{i n_i})$, whose individual layers $f_{ij}$ are defined by @eq-raster12 (for $i = 1, 2$) and @eq-raster23 (for $i=2,3$).

The process of producing these rasters is currently split into two distinct parts:

1. A **manual part** in which categorical rasters are constructed from raw downloaded datasets using QGIS
2. A **scripted part** in which these categorical rasters are converted into the form required by the model, using `R`.

The scripted part is executed by running `inst/scripts/data_production/main.R` (or the containerised version) with the manually-produced categorical rasters already present. This script mostly just calls functions defined in `R/data_production.R`.

### Data sources

```{r, echo=FALSE, display=FALSE}
# Read table
table <- readr::read_csv("data_sources.csv", show_col_types = FALSE)

# Drop first col (BES2024 number)
table <- table[, -1]

# Make the access url appear last
table <- table[, c(1, 2, 4:ncol(table), 3)]

# Display nicely
knitr::kable(table)
```

### Manipulation in QGIS

#### Landscape component

**TO DO**

#### Natural Features component

The 24 features in this component are grouped into three main categories: Landform (16 features), Slope (6 features), and Soil (2 features)

##### Landform features

The landform data was extracted from the Scotland 250K Soils Map (**CHRIS add APA citation**). The following methodologies were applied:

1.  Initial dissolve: the dataset was "dissolved" in QGIS using the Landform field, reducing it to 334 unique polygon features.

2.  Grouping: the 334 landform types were manually grouped into 16 broader categories based on descriptive keywords (e.g. "hills", "foothills" etc...). (**Chris can you confirm they were 16 and not 17? For transparency and reprodcucibility, a table in the appending mapping the original attributes to the grouped category would be ideal)**

3.  Final dissolve and resterization: The grouped dataset was dissolved again to generate one polygon per broad category. Finally, the data-sets was converted into raster format at a 20 m x 20 m resolution, with each layer corresponding to one of the 16 landform categories.

##### Slope features

Slope data were derived from the Copernicus GLO-30 Digital Elevation Model (DEM), a global 30 m resolution dataset (**CHRIS add APA citation and confirm resolution**). The following methodologies were applied:

1.  Slope calculation: the DEM the elevation data were converted into slopes using QGIS (**chris, was this using GDAL in its default setting?**).

2.  Reclassification: The continuous slope values were re-classified into six slopes classes (which form the six slope features) (see Table X). (**Chris were this category picked by you or do they come from somewhere? I think we need to specify this**)

| Slope (%) | Slope description     |
|-----------|-----------------------|
| \<3       | easy                  |
| 3-5       | gentle slope          |
| 5-10      | medium slope          |
| 10-20     | steep slope           |
| 20-30     | very steep slope      |
| \>30      | extremely steep slope |

: Slopes categories used to reclassify the Copernicus GLO-30 Digital Elevation Model (DEM) data into the 6 "slope" features of the Natural Features component of the RP model.

3.  Upsampling: The slope raster was upsampled to a 20m x 20m resolution in QGIS.\
        (**do you know which method was used to interpolate?**) (**was the raster first up-sampled to 20m x 20 m and then the slope calculated or the opposite?**)

##### Soil features

The ==landform data was extracted from the Scotland 250K Soils Map== (**APA citation**). The following methodologies were applied:

1.  Initial dissolve: The dataset was "dissolved" by field “genSoilTyp” in QGIS, reducing it to 12 unique attribute values (12 soil types).

2.  Grouping: These were manually grouped into 2 soil categories: orgnaic (peat) and mineral. (**chris, table with what soil type was assigned to each group**).

3.  Final dissolve and rasterization: The grouped dataset was dissolved again to the new soil type. Finally, the data-sets was converted into raster format at a 20 m x 20 m resolution.

#### Infrastructure Features component

The infrastructure component (FIPS_I.tif) is derived from a raster indicating the presence/absence or vicinity to 10 infrastructure features. The file for this component is derived through a three-step process:

To begin with, a raster with a value of 1 for cells where the features is present, and 0 or NAs for the cells where the feature is absent. The 10 features are grouped into three main categories: "Roads Tracks" (5 features), "Cycle Network" (4 features), and Local Path Network" (1 feature):

##### Roads and Tracks

Road Tracks data was sourced from the OS OpenRoads dataset (**add citation**). The following methodologies were applied:

1.  Initial dissolve: the dataset was "dissolved" in QGIS using the by the “Road type” field, reducing it to XX unique polygon features (.

2.    “Tracks” were extracted from OSM_Roads datasets then merged with the attribute field “Access Roads” in the OpenRoads dataset to create the attribute value “Access roads / Tracks”.

##### Cycle network

Sustrans National Cycle Network dataset were initially dissolved by two attribute fields  “Desc\_” & “Surface” in QGIS.  A new attribute field was created taking the attribute value from “Desc\_” (on road / off road) and suffixing with grouped surface types (paved or unpaved).

#### Water component

The water component is derived from a raster indicating the presence or absence of infrastructure features. This original raster, labeled **"original"** in the Easter Bush example map, contains: 1 for cells where the feature is present, and 0 or NAs for cells where the feature is absent.

The water component is derived from:

##### Rivers

 Os Open Rivers dataset was reduced from 74997 features, by dissolved by attribute fields “name” and “Region” so that all river segments were joined by a common name. To avoid rivers with the same name but located in different areas being incorrectly joined, “Region” from the OS Boundaries dataset was merged with the OS Open Rivers prior to this step. To reduce the dataset into something scoreable at a national scale, it was decided to use a proxy for river size/regional importance.  This is a subjective process, decided on by the research team.  Seven classes were created and dataset features classified based on either the attribute “form” which was a descriptor for water type, or keywords in the attribute “name” (see table for examples), or researcher knowledge of major rivers of national and regional importance.

| Class                             | Example search terms or process                             |
|:--------------------------------- |:----------------------------------------------------------- |
| Major river or tributary          | Specific e.g. "Tay", "Spey" etc.                            |
| Tidal river or estuary            | taken from dataset attribute "form"                         |
| Minor river or tributary          | e.g. "River", "Abhainn", "Uisge"                            |
| Named minor stream or tributary   | e.g. "Allt", "Alltan", "Burn", "Feadan", "Sruth", "Caochan" |
| Unnamed minor stream or tributary | e.g. "Allt", "Alltan", "Burn", "Feadan", "Sruth", "Caochan" |
| Canal                             | taken from dataset attribute "form"                         |
| Lake                              | taken from dataset attribute "form"                         |

: Water rivers classification


##### Lakes

The Spatial inventory of UK waterbodies dataset contained 25404 features for Scotland.  To make it into a relevant and scorable dataset it was reduced to six features based on the given size (in hectares) of a waterbody using the attribute “Poly_Area_Ha”.  Classification was as follows:

| Class        | size (ha) |
| ------------ | --------- |
| Pond         | $<0.2$    |
| Lochan       | $0.2-2$   |
| Small loch   | $2-10$    |
| Mediun loch | $10-100$  |
| Large loch  | $100-500$ |
| Major loch  | $>500$    | 

: water lakes


### Quantising the slope raster

With one exception, every raster layer produced by the manual process is an integer-valued categorical raster. The single exception is a 'slope' raster containing the average absolute gradient $s(x)$ within each pixel.

We use `terra::classify` to quantise this continuous range into six categories according to their steepness,

$$
C_{\text{slope}}(x) = \begin{cases}
1 & &0 \leq s(x) < 1.72 \\
2 & &1.72 \leq s(x) < 2.86 \\
3 & &2.86 \leq s(x) < 5.71 \\
4 & &5.71 \leq s(x) < 11.31 \\
5 & &11.31 \leq s(x) < 16.7 \\
6 & &16.7 \leq s(x) \, .
\end{cases}
$$ {#eq-slopequant}

==**TODO: Why are these intervals different from the ones above?**==

### Reprojection

The categorical rasters produced in the previous stage do not necessarily share the exact same coordinate grid. They can be coerced to share the same grid using `terra::project`.

We projected all rasters onto a reference raster with the following properties:

- **Coordinate reference system** (CRS): [EPSG:27700](https://epsg.io/27700) (British National Grid)
- **Resolution**: 20 metres x 20 metres
- **Extent**: $(x_\text{min}, x_\text{max}, y_\text{min}, y_\text{max}) = (-10000, 660000, 460000, 1220000)$, which is a rectangular box around Scotland.

We used the 'nearest' interpolation mode (`method="near"`) since the data is categorical. The reprojected rasters therefore contain the same set of integer values as the original rasters.

### Conversion to one-hot representation

The next stage converts the categorical rasters ($C_i(x) \in \{0, 1, \ldots, n_i\}$ into a set of presence/absence rasters for each feature. These binary-valued rasters are referred to as the *one-hot* representation of the data.

Consider the following categorical raster,

$$
C_i = \begin{bmatrix}
\ddots \\
& 1 & 0 & 0 \\
& 2 & 1 & 0 \\
& 2 & 1 & 3 & \\
& & & & \ddots
\end{bmatrix} \, .
$$ {#eq-catraster}

The one-hot encoding of this raster is written

$$
C_i \overset{\text{one hot}}{\longrightarrow} ( I_{i0}, I_{i1}, I_{i2}, I_{i3}, \ldots) \, ,
$$ {#eq-catonehot}

where the binary-valued presence/absence rasters are, in this case,

$$
\begin{align}
I_{i0} &= \begin{bmatrix}
\ddots \\
& 0 & 1 & 1 \\
& 0 & 0 & 1 \\
& 0 & 0 & 0 & \\
& & & & \ddots
\end{bmatrix} \, , \quad
I_{i1} = \begin{bmatrix}
\ddots \\
& 1 & 0 & 0 \\
& 0 & 1 & 0 \\
& 0 & 1 & 0 & \\
& & & & \ddots
\end{bmatrix} \, , \\
I_{i2} &= \begin{bmatrix}
\ddots \\
& 0 & 0 & 0 \\
& 1 & 0 & 0 \\
& 1 & 0 & 0 & \\
& & & & \ddots
\end{bmatrix} \, , \quad
I_{i3} = \begin{bmatrix}
\ddots \\
& 0 & 0 & 0 \\
& 0 & 0 & 0 \\
& 0 & 0 & 1 & \\
& & & & \ddots
\end{bmatrix} \, .
\end{align}
$$ {#eq-onehot}

The implementation of this step involves the use of `terra::lapp` to parallelise the calculation over the spatial domain. In practice we use `NA` instead of `0` to denote absence.

```R
one_hot_pixel <- function(x) {  # <1>
	out <- matrix(0, nrow = length(x), ncol = length(feature_mapping))
	for (i in seq_along(feature_mapping)) {
		out[, i] <- ifelse(x == as.numeric(feature_mapping[i]), 1, NA)
	}
	return(out)
}  # <1>

layer <- terra::lapp(  # <2>
	layer,  # <2>
	fun = one_hot_pixel,  # <2>
	filename = outfile,  # <3>
	overwrite = TRUE,
	wopt = list(
		names = names(feature_mapping),
		datatype = "INT1U"
	)  # <3>
)
```

1. Take a single pixel value (`x`) of a single-layered raster and return the one-hot representation at that point, i.e. a vector of `n_i` values of which up to one is `1` (present) and the remainder are `NA` (absent).
2. Apply this function in a vectorised fashion to every pixel of the input faster.
3. Write the outputs to `outfile` as they are computed, to reduce memory requirements.

### Stacking into component rasters

This stage is nothing more than combining many single-layered rasters files into a single multi-layered raster for each component. Roughly speaking, we do

```R
# Construct a list of rasters from each .tif file in `infiles`
rasters <- lapply(infiles, terra::rast)

# Construct a single multi-layered raster from this list
stacked <- terra::rast(rasters)

# Re-apply layer names
layer_names <- unlist(lapply(rasters, names))
names(stacked) <- layer_names

# Write the combined raster to disk
terra::writeRaster(stacked, outfile)
```

Note that `terra::rast(rasters)` does not preserve layer names when `rasters` is a list of rasters, hence the need for the two lines prior to `writeRaster`.

:::{.callout-warning}
#### A warning about layer names
It is *very* unfortunate that the names we have used for the layers follow the same format (`filename_i` for integers `i`) as the names that are automatically generated by `terra::rast`. Because of this, if these two lines that re-apply layer names are omitted, it is not obvious that anything is wrong; no error will be thrown and one can go onto compute RP values, since the names are as expected.

However, *the results will be wrong*, since `terra::rast` will apply _the right names in the wrong order_.

Future developers are strongly recommended to fix this problem by using different layer names. This issue and suggested solutions are discussed in depth in the [Developers' Report](dev_report.html#sec-layernames).
:::

### Proximity contributions

This stage applies @eq-distance and @eq-proximity to each layer of the Infrastructure and Water components.

In fact @eq-distance is the most challenging computation in the whole processing pipeline, due to the fact that its memory requirements scale poorly with the size of the input raster. 

Every single other processing step is entirely local; all of the information required to generate an output value for a pixel at coordinate $x$ is contained in the input pixels at coordinate $x$. This makes it trivial to process the data in chunks, and memory costs scale linearly with the area of the chunks.

In contrast, calculating distance to the nearest feature is strongly non-local; the output value at $x$ is a function of the full set of input values. Naively, the entire raster must be loaded to compute the output at a single location. 

To perform this calculation we used [`terra::distance`](https://rspatial.github.io/terra/reference/distance.html). It is not necessarily true that the underlying C++ implementation of `GDALComputeProximity`, which is called by `terra::distance`, actually loads the entire raster into memory immediately. However, for Scotland at 20 metre resolution, we found that the memory requirements for this distance calculation (several 10s of GB) surpass the typical memory available on a standard personal computer by an order of magnitude.

To get around this issue, the original Scotland-wide raster was divided into 20 overlapping spatial 'windows'. Note that the size of the overlap needed to be at least as large as the effective cutoff distance of 500m. After the distance step was complete within each window, the windows were stitched together, discarding the overlaps. 

The distance raster was also truncated at 500m, setting any values above this to `NA` which simply passes through the function applying @eq-proximity and ensures that we don't waste disk space storing high-precision floats that are functionally equivalent to zero.

#### Visual demonstration

**TODO: Madda - make this figure static for pdf?**

To account for proximity effects, the distance from each cell to the nearest infrastructure feature was calculated using the `terra::distance()` function in R. The resulting raster, labeled **"distance"** in the example map, contains the distance in meters from the center of each cell to the nearest feature. This raster is named "**scored**" in the example map, using the distance decay function.

:::{.content-visible when-format="html"}

```{r, echo=FALSE}
library(magrittr)
library(biodt.recreation)

source("functions_report.R")

water <- terra::rast(system.file("extdata", "rasters", "Bush", "original", "Water.tif", package="biodt.recreation"))

slsra <- terra::rast(system.file("extdata", "rasters", "Bush", "SLSRA.tif", package="biodt.recreation"))

fips_n <- terra::rast(system.file("extdata", "rasters", "Bush", "FIPS_N.tif", package="biodt.recreation"))

fips_i <- terra::rast(system.file("extdata", "rasters", "Bush", "original", "FIPS_I.tif", package="biodt.recreation"))

# the box of bush estate
e <- terra::ext(water)
coords <- matrix(c(
  e$xmin, e$ymin,
  e$xmax, e$ymin,
  e$xmax, e$ymax,
  e$xmin, e$ymax,
  e$xmin, e$ymin # close polygon
), ncol = 2, byrow = TRUE)
bbox_poly <- terra::vect(coords,
  type = "polygons",
  crs = terra::crs(water)
) %>%
  sf::st_as_sf() %>%
  sf::st_transform(crs = 4326)

base_map <- 
  leaflet::leaflet() %>%
  leaflet::addProviderTiles("OpenStreetMap.Mapnik", options = leaflet::providerTileOptions(zIndex = 0, noWrap = TRUE), group = "Streets") %>%
  leaflet::addProviderTiles("Esri.WorldImagery", options = leaflet::providerTileOptions(zIndex = 0, noWrap = TRUE), group = "Satellite") %>%
  leaflet::addPolygons(
    data = bbox_poly,
    color = "black",
    weight = 3,
    fill = FALSE
  ) 
```

```{r, echo=FALSE, out.height = 650}
fips_i_rstack <- list(
  "original" = fips_i,
  "distance" = terra::rast(system.file("extdata", "rasters", "Bush", "dist", "FIPS_I_dist.tif", package="biodt.recreation")),
  "scored" = terra::rast(system.file("extdata", "rasters", "Bush", "FIPS_I.tif", package="biodt.recreation"))
  )

make_layer_map_dist(rstack = fips_i_rstack, base_map,
                    show_index = 2,
                    color_original = "#DA627D")
```

:::
## List of items/features {#sec-listitems}

Here we list the full set of 87 items/features that make up the layers of the input rasters, and must be scored by the user to construct a persona.

| Component        | Short code | Num. layers | Description                                                                                  |
| ---------------- | ---------- | ----------- | -------------------------------------------------------------------------------------------- |
| Landscape        | `SLSRA`    | 40          | Land cover type, landscape designations and conservation, and farmland of high nature value. |
| Natural Features | `FIPS_N`   | 24          | Landform types, soil types and slope.                                                        |
| Infrastructure   | `FIPS_I`   | 10          | Roads, tracks, footpaths and cycle networks.                                                 |
| Water            | `Water`    | 13          | Lakes and rivers.                                                                            |

```{r, echo=FALSE}
config <- biodt.recreation::load_config()

config_by_component <- split(config, as.factor(config[["Component"]]))
```

### Landscape component

```{r, echo=FALSE}
#| label: tbl-slsra
#| tbl-cap: Description of items/features in the _Landscape_ component.

dplyr::select(config_by_component$SLSRA, Name, Description) |>
	knitr::kable(format = "html")
```

:::{.content-visible when-format="html"}
```{r, echo=FALSE}
make_layer_map(rstack = slsra,  base_map = base_map,
               show_index = 5, #start with SLSRA_LCM_6 selected as example
               color = "#386641")
```
:::

:::{.callout-tip}
The interactive version of this document contains maps that allow you to toggle individual layers.
:::
### Natural Features component

```{r, echo=FALSE}
#| label: tbl-fipsn
#| tbl-cap: Description of items/features in the _Natural Features_ component.

dplyr::select(config_by_component$FIPS_N, Name, Description) |> 
	knitr::kable(format = "html")
```


:::{.content-visible when-format="html"}
```{r, echo=FALSE}
make_layer_map(rstack = fips_n,  base_map = base_map,
               show_index = 5, #start with FIPS_N_Landform_16 selected as example
               color = "#CBA340")

```
:::

### Infrastructure Features component

```{r, echo=FALSE}
#| label: tbl-fipsi
#| tbl-cap: Description of items/features in the _Infrastructure Features_ component.

dplyr::select(config_by_component$FIPS_I, Name, Description) |> 
	knitr::kable(format = "html")
```


### Water component

```{r, echo=FALSE}
#| label: tbl-water
#| tbl-cap: Description of items/features in the _Water_ component.

dplyr::select(config_by_component$Water, Name, Description) |> 
	knitr::kable(format = "html")
```

:::{.content-visible when-format="html"}
```{r, echo=FALSE, out.height = 650}
water_rstack <- list(
  "original" = water,
  "distance" = terra::rast(system.file("extdata", "rasters", "Bush", "dist", "Water_dist.tif", package="biodt.recreation")),
  "scored" = terra::rast(system.file("extdata", "rasters", "Bush", "Water.tif", package="biodt.recreation"))
  )

make_layer_map_dist(rstack = water_rstack, base_map,
                    show_index = 6, # "water rivers 3 distance"
                    color_original = "#4E6766")
```
:::



{{< include _endmatter.qmd >}}
